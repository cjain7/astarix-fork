configfile: "snakemake_config.yaml"
BCALM = config["bcalm_bin_path"]
BCALMCONVERTPATH = config["bcalm_convert_path"]
ART = config["art_bin_path"]

ASTARIX_BIN = config["astarix_bin_path"]
GA_BIN = config["graphaligner_bin_path"]
PASGAL_BIN = config["pasgal_bin_path"]
VG_BIN = config["vg_bin_path"]

TIMELIMIT       = "(timeout 7200s"
TIMEOUTPRINT    = ") || ([ $? -eq 124 ] && echo timeouted)"

ASTARIX_CMD = "{TIMELIMIT} {ASTARIX_BIN} align-optimal -q {input.reads} -g {input.graph} -d 5 -M 0 -S 1 -G 5 -o $(dirname {output.align}) >{output.file} {TIMEOUTPRINT} >>{output.file}"
DIJKSTRA_CMD = "{TIMELIMIT} {ASTARIX_BIN} align-optimal -a dijkstra -q {input.reads} -g {input.graph} -M 0 -S 1 -G 1 -o $(dirname {output.align}) >{output.file} {TIMEOUTPRINT} >>{output.file}"
GA_CMD = "{TIMELIMIT} {GA_BIN} -f {input.reads} -g {input.graph} >{output.file} {TIMEOUTPRINT} >>{output.file}"
PASGAL_CMD = "{TIMELIMIT} {PASGAL_BIN} -m vg -r {input.graph_vg} -q {input.reads} -t 1 -o {output.file} {TIMEOUTPRINT} >>{output.file}"

ALIGN_CMD = {
    'astarix': ASTARIX_CMD,
    'dijkstra': DIJKSTRA_CMD,
    'graphaligner': GA_CMD,
    'pasgal': PASGAL_CMD,
}

PaSGAL_DATA_URL = "https://alurulab.cc.gatech.edu/sites/all/projectFiles/PaSGAL_Chirag"
PaSGAL_FILES = ["L1.fa", "L2.fastq", "L3.fastq",
                "M1.fa", "M2.fastq", "M3.fastq",
                "LRC.vg", "MHC1.vg", "MHC2.txt"]

# params
GRAPHS       = [ "ecoli" ] #"chr1" ]# "ecoli" ]
ALGOS        = [ "pasgal", "astarix", "dijkstra", "graphaligner" ] # ] #, "dijkstra", "graphaligner" ] #"vg" ] $"pasgal"
GRAPH_HEADS_SMALL  = [10000, 100000, 1000000, 10000000]  # up to current exact state-of-the-art
GRAPH_HEADS_BIG    = [10000000, 100000000, 100000000]
GRAPH_HEADS = GRAPH_HEADS_SMALL #+ GRAPH_HEADS_BIG
Ns           = [10000] #, 1000, 10000]       # number of reads
ms           = [100] #75] #, 100, 150]          # read len

FIRST_ROW       = "algo\tgraph\thead\tN\tm\ts\th:m:s\tmax_rss\tmax_vms\tmax_uss\tmax_pss\tio_in\tio_out\tmean_load"
AGGREGATED_BENCHMARKS = "results/aggregated_benchmarks.csv"
AGGREGATED_EXPERIMENTS = "results/aggregated_experiments.csv"

graph_params = "{graph}_head{head}"
read_params = "N{N}_m{m}"
params = graph_params + "_" + read_params

EXPERIMENT_N = 20000
EXPERIMENT_FIRST_ROW       = "algo\tgraph\ts\th:m:s\tmax_rss\tmax_vms\tmax_uss\tmax_pss\tio_in\tio_out\tmean_load"
EXPERIMENT_GRAPHS = ["MHC1", "LRC"]
EXPERIMENT_READS = { "MHC1": "M1", "LRC": "L1"}
experiment_graph = "graphs/pasgal-{graph}.gfa"
experiment_graph_vg = "raw/PaSGAL/{graph}.vg"
experiment_input_reads = "raw/PaSGAL/{reads}.fa"

aligners_inputs = {
    'graph' : "graphs/"+graph_params+"_linear.gfa",
    'graph_vg' : "graphs/"+graph_params+"_linear.vg",
    'reads' : "reads/"+params+"/illumina.fq"
}

## Default summary rule to be satisfied.
rule all:
    input:
        astar_vs_dijkstra = "results/AVSD_RAN",
        visualization = "results/VISUALIZATION_RAN",
        agg1 = "results/aggregated_benchmarks.csv",
        agg2 = "results/aggregated_experiments.csv",
        trie = "results/TRIE_DUMMY"

rule trie_experiments:
    input:
        expand("results/trie_experiment_big/ecoli_head1000000_linear/astar-D{D}_TRIE_DONE", D=range(6, 17))
    output:
        "results/TRIE_DUMMY"
    shell:
        "jupyter nbconvert --to notebook --inplace --execute trie_experiment.ipynb > {output}"

rule trie_experiment:
    input:
        "results/aggregated_benchmarks.csv"
    output:
        dir = directory("results/trie_experiment_big/ecoli_head1000000_linear/astar-D{D}/"),
        dummy = "results/trie_experiment_big/ecoli_head1000000_linear/astar-D{D}_TRIE_DONE"
    shell:
        "{ASTARIX_BIN} align-optimal -D {wildcards.D} -t 1 -g graphs/ecoli_head1000000_linear.gfa -q reads/ecoli_head1000000_N1000_m100/illumina.fq -o {output.dir} && touch {output.dummy}"

rule aggregate_benchmarks:
    input:
        file = expand("results/{algo}/"+params+"/benchmark.txt", algo=ALGOS, graph=GRAPHS, head=GRAPH_HEADS, N=Ns, m=ms),
    output:
        "results/aggregated_benchmarks.csv"
    params:
        prefix = expand("{algo}\t{graph}\t{head}\t{N}\t{m}", algo=ALGOS, graph=GRAPHS, head=GRAPH_HEADS, N=Ns, m=ms)
    shell:
        "paste <(echo \"{params.prefix}\" | tr ' ' '\n') <(tail -n 1 --silent {input.file}) | sed '1s/^/{FIRST_ROW}\\n/' > {output}"

rule aggregate_experiments:
    input:
        file = expand("results/{algo}/{graph}/benchmark.txt", algo=ALGOS, graph=EXPERIMENT_GRAPHS),
    output:
        "results/aggregated_experiments.csv"
    params:
        prefix = expand("{algo}\t{graph}", algo=ALGOS, graph=EXPERIMENT_GRAPHS)
    shell:
        "paste <(echo \"{params.prefix}\" | tr ' ' '\n') <(tail -n 1 --silent {input.file}) | sed '1s/^/{EXPERIMENT_FIRST_ROW}\\n/' > {output}"

rule visualization_notebook:
    input:
        aggregated_benchmarks = "results/aggregated_benchmarks.csv",
    output:
        "results/VISUALIZATION_RAN"
    shell:
        "jupyter nbconvert --to notebook --inplace --execute visualization.ipynb > {output}"

rule astar_vs_dijkstra:
    input:
        astar_align = "results/astarix/MHC1/out/alignments.tsv",
        dijkstra_align = "results/dijkstra/MHC1/out/alignments.tsv"
    output:
        "results/AVSD_RAN"
    shell:
        "jupyter nbconvert --to notebook --inplace --execute astar_vs_dijkstra.ipynb > {output}"

rule benchmark_astarix:
    input:
        reads = lambda wlc: "reads/"+EXPERIMENT_READS[wlc.graph]+"_reads"+str(EXPERIMENT_N)+".fa",
        graph = "graphs/pasgal-{graph}.gfa",
    output:
        align = "results/astarix/{graph}/out/alignments.tsv",
        file = "results/astarix/{graph}/summary.txt"
    benchmark:
        "results/astarix/{graph}/benchmark.txt"
    log:
        "results/astarix/{graph}/log.txt"
    shell:
        ASTARIX_CMD

rule benchmark_dijkstra:
    input:
        reads = lambda wlc: "reads/"+EXPERIMENT_READS[wlc.graph]+"_reads"+str(EXPERIMENT_N)+".fa",
        graph = "graphs/pasgal-{graph}.gfa",
    output:
        align = "results/dijkstra/{graph}/out/alignments.tsv",
        file = "results/dijkstra/{graph}/summary.txt"
    benchmark:
        "results/dijkstra/{graph}/benchmark.txt"
    log:
        "results/dijkstra/{graph}/log.txt"
    shell:
        DIJKSTRA_CMD

rule benchmark_graphaligner:
    input:
        reads = lambda wlc: "reads/"+EXPERIMENT_READS[wlc.graph]+"_reads"+str(EXPERIMENT_N)+".fa",
        graph = "graphs/pasgal-{graph}.gfa",
    output:
        file = "results/graphaligner/{graph}/summary.txt"
    benchmark:
        "results/graphaligner/{graph}/benchmark.txt"
    log:
        "results/graphaligner/{graph}/log.txt"
    shell:
        GA_CMD

rule benchmark_pasgal:
    input:
        reads = lambda wlc: "reads/"+EXPERIMENT_READS[wlc.graph]+"_reads"+str(EXPERIMENT_N)+".fa",
        graph = "graphs/pasgal-{graph}.gfa",
        graph_vg = "raw/PaSGAL/{graph}.vg"
    output:
        file = "results/pasgal/{graph}/summary.txt"
    benchmark:
        "results/pasgal/{graph}/benchmark.txt"
    log:
        "results/pasgal/{graph}/log.txt"
    shell:
        PASGAL_CMD

rule vg2gfa:
    input:
        "raw/PaSGAL/{prefix}.vg"
    output:
        "graphs/pasgal-{prefix}.gfa"
    shell:
        "{VG_BIN} view {input} > {output}"

## Chronological order of execution follows. ##

rule clean:
    shell:
        "rm -rf reads graphs results prefixes"

rule download_ecoli:
    output:
        protected("raw/ecoli.fa")
    shadow: "shallow"
    run:
        shell("wget ftp://ftp.ensemblgenomes.org/pub/bacteria/release-40/fasta/bacteria_0_collection/escherichia_coli_str_k_12_substr_mg1655/dna/Escherichia_coli_str_k_12_substr_mg1655.ASM584v2.dna.chromosome.Chromosome.fa.gz"),
        shell("gunzip Escherichia_coli_str_k_12_substr_mg1655.ASM584v2.dna.chromosome.Chromosome.fa.gz")
        shell("cut -d ' ' -f 1 < Escherichia_coli_str_k_12_substr_mg1655.ASM584v2.dna.chromosome.Chromosome.fa >{output}")

rule download_chr1:
    output:
        protected("raw/chr1.fa")
    shadow: "shallow"
    run:
        shell("wget ftp://ftp.ensembl.org/pub/release-98/fasta/homo_sapiens/dna/Homo_sapiens.GRCh38.dna.chromosome.1.fa.gz"),
        shell("gunzip Homo_sapiens.GRCh38.dna.chromosome.1.fa.gz"),
        shell("cut -d ' ' -f 1 < Homo_sapiens.GRCh38.dna.chromosome.1.fa | sed 's/[nN]//g' >{output}")

rule download_PaSGAL_data:
    output:
        protected("raw/PaSGAL/{file}")
    shadow: "shallow"
    run:
        shell("wget {PaSGAL_DATA_URL}/{wildcards.file} -O {output}")

rule create_genome_prefix:
    input:
        "raw/{graph}.fa"
    output:
        "prefixes/"+graph_params+".fa"
    run:
        if {wildcards.head}:
            shell("head -c {wildcards.head} {input} >{output}")
        else:
            shell("cp {input} {output}")
        #"echo -n 'S\t1\t' >{output} && tail -n +2 {input} | tr -d '\n' >>{output}"
        #"| head -c {wildcards.head} >>{output}"

rule create_linear_graph:
    input:
        "prefixes/"+graph_params+".fa"
    output:
        gfa = "graphs/"+graph_params+"_linear.gfa",
        vg = "graphs/"+graph_params+"_linear.vg"
    shell:
        "echo -n 'S\t1\t' >{output.gfa} && tail -n +2 {input} | tr -d '\n' >>{output.gfa}"
        "&& {VG_BIN} view -Fv {output.gfa} >{output.vg}"

rule generate_illumina_reads:
    input:
        "prefixes/"+graph_params+".fa"
    params:
        prefix = "reads/"+params+"/illumina"
    output:
        "reads/"+params+"/illumina.fq"
    shadow: "shallow"
    shell:
        "{ART} -ss HS25 -sam -i {input} -c {wildcards.N} -l {wildcards.m} -o {params.prefix} --rndSeed 42"

rule head_reads:
    input:
        "raw/{reads_file}.fa"
    output:
        "reads/{reads_file}_reads{reads_num}.fa"
    shell:
        "head -n $(( 2 * {wildcards.reads_num} )) {input} >{output}"

rule head_pasgal_reads:
    input:
        "raw/PaSGAL/{reads_file}.fa"
    output:
        "reads/{reads_file}_reads{reads_num}.fa"
    shell:
        "head -n $(( 2 * {wildcards.reads_num} )) {input} >{output}"

rule run_astarix:
    input: **aligners_inputs
    output:
        file = "results/astarix/"+params+"/summary.txt",
        align = "results/astarix/"+params+"/out/alignments.tsv"
    benchmark:
        "results/astarix/"+params+"/benchmark.txt"
    log:
        "results/astarix/"+params+"/log.txt"
    shell:
        ASTARIX_CMD

rule run_dijkstra:
    input: **aligners_inputs
    output:
        file = "results/dijkstra/"+params+"/summary.txt",
        align = "results/dijkstra/"+params+"/out/alignments.tsv"
    benchmark:
        "results/dijkstra/"+params+"/benchmark.txt"
    log:
        "results/dijkstra/"+params+"/log.txt"
    shell:
        DIJKSTRA_CMD

rule run_graphaligner:
    input: **aligners_inputs
    output:
        file = "results/graphaligner/"+params+"/summary.txt"
    benchmark:
        "results/graphaligner/"+params+"/benchmark.txt"
    log:
        "results/graphaligner/"+params+"/log.txt"
    shell:
        GA_CMD

rule run_pasgal:
    input: **aligners_inputs
    output:
        file = "results/pasgal/"+params+"/summary.txt"
    benchmark:
        "results/pasgal/"+params+"/benchmark.txt"
    log:
        "results/pasgal/"+params+"/log.txt"
    shell:
        PASGAL_CMD

rule run_vg:
    input: **aligners_inputs
    output:
        file = "results/vg/"+params+"/summary.txt",
    shell:
        "{VG_BIN} -s AAATATATAAAAATATTTAA -g {input.graph} >{output}"
